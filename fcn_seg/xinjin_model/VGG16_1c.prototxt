name: "VGG_ILSVRC_16_layers"
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "mask"
  top: "edge"
  include {
    phase: TRAIN
  }
  python_param {
    module: "PSCDataLayer"
    layer: "PSCDataLayer"
    param_str: "{\'data_dir\': \'/home/mfs6174/workspace0/douyu_2800\', \'seed\': 6174, \'batch_size\': 8, \'flip\': 1 ,\'crop\': 1,\'aux\': 0}"
  }
}
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "mask"
  top: "edge"
  include {
    phase: TEST
  }
  python_param {
    module: "PSCDataLayer"
    layer: "PSCDataLayer"
    param_str: "{\'data_dir\': \'/home/mfs6174/workspace0/douyu_2800/test\', \'seed\': 6174, \'batch_size\': 1,\'aux\': 0}"
  }
}
layer {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}
layer {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}
layer {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}
layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}
#layer {
#  bottom: "conv3_3"
#  top: "pool3"
#  name: "pool3"
#  type: "Pooling"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
layer {
  bottom: "conv3_3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}
layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}
#layer {
#  bottom: "conv4_3"
#  top: "pool4"
#  name: "pool4"
#  type: "Pooling"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
layer {
  bottom: "conv4_3"
  top: "conv5_1"
  name: "conv5_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}
layer {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "conv5_3/relu"
  type: "ReLU"
}
#layer {
#name: "conv5_3/drop"
#type: "Dropout"
#bottom: "conv5_3"
#top: "conv5_3"
#dropout_param {
#dropout_ratio: 0.4
#}
#}

layer {
  bottom: "conv5_3"
  top: "edge/cls"
  name: "edge/cls"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 2 
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 288
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
       type: "Reshape" 
	bottom: "edge/cls" 
	top: "edge/cls/reshape"
       reshape_param { shape { dim: 2  dim: 144 } axis:  1 }
}
layer {
  bottom: "edge/cls/reshape"
  bottom: "edge"
  top: "edge/loss"
  name: "edge/loss"
  type: "SoftmaxWithLoss"
  loss_weight: 0.8
  softmax_param {axis: 1}
}

layer {
  bottom: "edge/cls/reshape"
  top: "edge/prob"
  name: "edge/prob"
  type: "Softmax"
  softmax_param {axis: 1}
  include {
    phase: TEST
  }
}
layer {
  bottom: "edge/prob"
  bottom: "edge"
  top: "edge/top-1"
  name: "edge/top-1"
  type: "Accuracy"
  include {
    phase: TEST
  }
}

layer {
  bottom: "conv5_3"
  top: "mask/cls"
  name: "mask/cls"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 2 
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1152
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
       type: "Reshape" 
	bottom: "mask/cls" 
	top: "mask/cls/reshape"
       reshape_param { shape { dim: 2  dim: 576 } axis:  1 }
}
layer {
  bottom: "mask/cls/reshape"
  bottom: "mask"
  top: "mask/loss"
  name: "mask/loss"
  type: "SoftmaxWithLoss"
  loss_weight: 1
  softmax_param {axis: 1}
}

layer {
  bottom: "mask/cls/reshape"
  top: "mask/prob"
  name: "mask/prob"
  type: "Softmax"
  softmax_param {axis: 1}
  include {
    phase: TEST
  }
}
layer {
  bottom: "mask/prob"
  bottom: "mask"
  top: "mask/top-1"
  name: "mask/top-1"
  type: "Accuracy"
  include {
    phase: TEST
  }
}
